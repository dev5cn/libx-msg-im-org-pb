// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-im-org.proto

#ifndef PROTOBUF_cfg_2dx_2dmsg_2dim_2dorg_2eproto__INCLUDED
#define PROTOBUF_cfg_2dx_2dmsg_2dim_2dorg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsXmsgImOrgCfgPbImpl();
void InitDefaultsXmsgImOrgCfgPb();
void InitDefaultsXmsgImOrgCfgMongodbImpl();
void InitDefaultsXmsgImOrgCfgMongodb();
void InitDefaultsXmsgImOrgCfgMysqlImpl();
void InitDefaultsXmsgImOrgCfgMysql();
void InitDefaultsXmsgImOrgCfgLogImpl();
void InitDefaultsXmsgImOrgCfgLog();
void InitDefaultsXmsgImOrgCfgXscTcpServerImpl();
void InitDefaultsXmsgImOrgCfgXscTcpServer();
void InitDefaultsXmsgImOrgCfgXmsgNeH2nAddrImpl();
void InitDefaultsXmsgImOrgCfgXmsgNeH2nAddr();
void InitDefaultsXmsgImOrgCfgXmsgNeN2hAddrImpl();
void InitDefaultsXmsgImOrgCfgXmsgNeN2hAddr();
void InitDefaultsXmsgImOrgCfgMiscImpl();
void InitDefaultsXmsgImOrgCfgMisc();
inline void InitDefaults() {
  InitDefaultsXmsgImOrgCfgPb();
  InitDefaultsXmsgImOrgCfgMongodb();
  InitDefaultsXmsgImOrgCfgMysql();
  InitDefaultsXmsgImOrgCfgLog();
  InitDefaultsXmsgImOrgCfgXscTcpServer();
  InitDefaultsXmsgImOrgCfgXmsgNeH2nAddr();
  InitDefaultsXmsgImOrgCfgXmsgNeN2hAddr();
  InitDefaultsXmsgImOrgCfgMisc();
}
}  // namespace protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto
class XmsgImOrgCfgLog;
class XmsgImOrgCfgLogDefaultTypeInternal;
extern XmsgImOrgCfgLogDefaultTypeInternal _XmsgImOrgCfgLog_default_instance_;
class XmsgImOrgCfgMisc;
class XmsgImOrgCfgMiscDefaultTypeInternal;
extern XmsgImOrgCfgMiscDefaultTypeInternal _XmsgImOrgCfgMisc_default_instance_;
class XmsgImOrgCfgMongodb;
class XmsgImOrgCfgMongodbDefaultTypeInternal;
extern XmsgImOrgCfgMongodbDefaultTypeInternal _XmsgImOrgCfgMongodb_default_instance_;
class XmsgImOrgCfgMysql;
class XmsgImOrgCfgMysqlDefaultTypeInternal;
extern XmsgImOrgCfgMysqlDefaultTypeInternal _XmsgImOrgCfgMysql_default_instance_;
class XmsgImOrgCfgPb;
class XmsgImOrgCfgPbDefaultTypeInternal;
extern XmsgImOrgCfgPbDefaultTypeInternal _XmsgImOrgCfgPb_default_instance_;
class XmsgImOrgCfgXmsgNeH2nAddr;
class XmsgImOrgCfgXmsgNeH2nAddrDefaultTypeInternal;
extern XmsgImOrgCfgXmsgNeH2nAddrDefaultTypeInternal _XmsgImOrgCfgXmsgNeH2nAddr_default_instance_;
class XmsgImOrgCfgXmsgNeN2hAddr;
class XmsgImOrgCfgXmsgNeN2hAddrDefaultTypeInternal;
extern XmsgImOrgCfgXmsgNeN2hAddrDefaultTypeInternal _XmsgImOrgCfgXmsgNeN2hAddr_default_instance_;
class XmsgImOrgCfgXscTcpServer;
class XmsgImOrgCfgXscTcpServerDefaultTypeInternal;
extern XmsgImOrgCfgXscTcpServerDefaultTypeInternal _XmsgImOrgCfgXscTcpServer_default_instance_;

// ===================================================================

class XmsgImOrgCfgPb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImOrgCfgPb) */ {
 public:
  XmsgImOrgCfgPb();
  virtual ~XmsgImOrgCfgPb();

  XmsgImOrgCfgPb(const XmsgImOrgCfgPb& from);

  inline XmsgImOrgCfgPb& operator=(const XmsgImOrgCfgPb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImOrgCfgPb(XmsgImOrgCfgPb&& from) noexcept
    : XmsgImOrgCfgPb() {
    *this = ::std::move(from);
  }

  inline XmsgImOrgCfgPb& operator=(XmsgImOrgCfgPb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImOrgCfgPb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImOrgCfgPb* internal_default_instance() {
    return reinterpret_cast<const XmsgImOrgCfgPb*>(
               &_XmsgImOrgCfgPb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(XmsgImOrgCfgPb* other);
  friend void swap(XmsgImOrgCfgPb& a, XmsgImOrgCfgPb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImOrgCfgPb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImOrgCfgPb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImOrgCfgPb& from);
  void MergeFrom(const XmsgImOrgCfgPb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImOrgCfgPb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .XmsgImOrgCfgXmsgNeH2nAddr h2n = 7;
  int h2n_size() const;
  void clear_h2n();
  static const int kH2NFieldNumber = 7;
  const ::XmsgImOrgCfgXmsgNeH2nAddr& h2n(int index) const;
  ::XmsgImOrgCfgXmsgNeH2nAddr* mutable_h2n(int index);
  ::XmsgImOrgCfgXmsgNeH2nAddr* add_h2n();
  ::google::protobuf::RepeatedPtrField< ::XmsgImOrgCfgXmsgNeH2nAddr >*
      mutable_h2n();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImOrgCfgXmsgNeH2nAddr >&
      h2n() const;

  // repeated .XmsgImOrgCfgXmsgNeN2hAddr n2h = 8;
  int n2h_size() const;
  void clear_n2h();
  static const int kN2HFieldNumber = 8;
  const ::XmsgImOrgCfgXmsgNeN2hAddr& n2h(int index) const;
  ::XmsgImOrgCfgXmsgNeN2hAddr* mutable_n2h(int index);
  ::XmsgImOrgCfgXmsgNeN2hAddr* add_n2h();
  ::google::protobuf::RepeatedPtrField< ::XmsgImOrgCfgXmsgNeN2hAddr >*
      mutable_n2h();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImOrgCfgXmsgNeN2hAddr >&
      n2h() const;

  // string cgt = 1;
  void clear_cgt();
  static const int kCgtFieldNumber = 1;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string cfgType = 2;
  void clear_cfgtype();
  static const int kCfgTypeFieldNumber = 2;
  const ::std::string& cfgtype() const;
  void set_cfgtype(const ::std::string& value);
  #if LANG_CXX11
  void set_cfgtype(::std::string&& value);
  #endif
  void set_cfgtype(const char* value);
  void set_cfgtype(const char* value, size_t size);
  ::std::string* mutable_cfgtype();
  ::std::string* release_cfgtype();
  void set_allocated_cfgtype(::std::string* cfgtype);

  // .XmsgImOrgCfgMongodb mongodb = 3;
  bool has_mongodb() const;
  void clear_mongodb();
  static const int kMongodbFieldNumber = 3;
  const ::XmsgImOrgCfgMongodb& mongodb() const;
  ::XmsgImOrgCfgMongodb* release_mongodb();
  ::XmsgImOrgCfgMongodb* mutable_mongodb();
  void set_allocated_mongodb(::XmsgImOrgCfgMongodb* mongodb);

  // .XmsgImOrgCfgMysql mysql = 4;
  bool has_mysql() const;
  void clear_mysql();
  static const int kMysqlFieldNumber = 4;
  const ::XmsgImOrgCfgMysql& mysql() const;
  ::XmsgImOrgCfgMysql* release_mysql();
  ::XmsgImOrgCfgMysql* mutable_mysql();
  void set_allocated_mysql(::XmsgImOrgCfgMysql* mysql);

  // .XmsgImOrgCfgLog log = 5;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 5;
  const ::XmsgImOrgCfgLog& log() const;
  ::XmsgImOrgCfgLog* release_log();
  ::XmsgImOrgCfgLog* mutable_log();
  void set_allocated_log(::XmsgImOrgCfgLog* log);

  // .XmsgImOrgCfgXscTcpServer xscTcpCfg = 6;
  bool has_xsctcpcfg() const;
  void clear_xsctcpcfg();
  static const int kXscTcpCfgFieldNumber = 6;
  const ::XmsgImOrgCfgXscTcpServer& xsctcpcfg() const;
  ::XmsgImOrgCfgXscTcpServer* release_xsctcpcfg();
  ::XmsgImOrgCfgXscTcpServer* mutable_xsctcpcfg();
  void set_allocated_xsctcpcfg(::XmsgImOrgCfgXscTcpServer* xsctcpcfg);

  // .XmsgImOrgCfgMisc misc = 9;
  bool has_misc() const;
  void clear_misc();
  static const int kMiscFieldNumber = 9;
  const ::XmsgImOrgCfgMisc& misc() const;
  ::XmsgImOrgCfgMisc* release_misc();
  ::XmsgImOrgCfgMisc* mutable_misc();
  void set_allocated_misc(::XmsgImOrgCfgMisc* misc);

  // uint64 gts = 10;
  void clear_gts();
  static const int kGtsFieldNumber = 10;
  ::google::protobuf::uint64 gts() const;
  void set_gts(::google::protobuf::uint64 value);

  // uint64 uts = 11;
  void clear_uts();
  static const int kUtsFieldNumber = 11;
  ::google::protobuf::uint64 uts() const;
  void set_uts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:XmsgImOrgCfgPb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImOrgCfgXmsgNeH2nAddr > h2n_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImOrgCfgXmsgNeN2hAddr > n2h_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr cfgtype_;
  ::XmsgImOrgCfgMongodb* mongodb_;
  ::XmsgImOrgCfgMysql* mysql_;
  ::XmsgImOrgCfgLog* log_;
  ::XmsgImOrgCfgXscTcpServer* xsctcpcfg_;
  ::XmsgImOrgCfgMisc* misc_;
  ::google::protobuf::uint64 gts_;
  ::google::protobuf::uint64 uts_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::InitDefaultsXmsgImOrgCfgPbImpl();
};
// -------------------------------------------------------------------

class XmsgImOrgCfgMongodb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImOrgCfgMongodb) */ {
 public:
  XmsgImOrgCfgMongodb();
  virtual ~XmsgImOrgCfgMongodb();

  XmsgImOrgCfgMongodb(const XmsgImOrgCfgMongodb& from);

  inline XmsgImOrgCfgMongodb& operator=(const XmsgImOrgCfgMongodb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImOrgCfgMongodb(XmsgImOrgCfgMongodb&& from) noexcept
    : XmsgImOrgCfgMongodb() {
    *this = ::std::move(from);
  }

  inline XmsgImOrgCfgMongodb& operator=(XmsgImOrgCfgMongodb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImOrgCfgMongodb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImOrgCfgMongodb* internal_default_instance() {
    return reinterpret_cast<const XmsgImOrgCfgMongodb*>(
               &_XmsgImOrgCfgMongodb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(XmsgImOrgCfgMongodb* other);
  friend void swap(XmsgImOrgCfgMongodb& a, XmsgImOrgCfgMongodb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImOrgCfgMongodb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImOrgCfgMongodb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImOrgCfgMongodb& from);
  void MergeFrom(const XmsgImOrgCfgMongodb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImOrgCfgMongodb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:XmsgImOrgCfgMongodb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::InitDefaultsXmsgImOrgCfgMongodbImpl();
};
// -------------------------------------------------------------------

class XmsgImOrgCfgMysql : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImOrgCfgMysql) */ {
 public:
  XmsgImOrgCfgMysql();
  virtual ~XmsgImOrgCfgMysql();

  XmsgImOrgCfgMysql(const XmsgImOrgCfgMysql& from);

  inline XmsgImOrgCfgMysql& operator=(const XmsgImOrgCfgMysql& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImOrgCfgMysql(XmsgImOrgCfgMysql&& from) noexcept
    : XmsgImOrgCfgMysql() {
    *this = ::std::move(from);
  }

  inline XmsgImOrgCfgMysql& operator=(XmsgImOrgCfgMysql&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImOrgCfgMysql& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImOrgCfgMysql* internal_default_instance() {
    return reinterpret_cast<const XmsgImOrgCfgMysql*>(
               &_XmsgImOrgCfgMysql_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(XmsgImOrgCfgMysql* other);
  friend void swap(XmsgImOrgCfgMysql& a, XmsgImOrgCfgMysql& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImOrgCfgMysql* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImOrgCfgMysql* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImOrgCfgMysql& from);
  void MergeFrom(const XmsgImOrgCfgMysql& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImOrgCfgMysql* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string db = 3;
  void clear_db();
  static const int kDbFieldNumber = 3;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // string usr = 4;
  void clear_usr();
  static const int kUsrFieldNumber = 4;
  const ::std::string& usr() const;
  void set_usr(const ::std::string& value);
  #if LANG_CXX11
  void set_usr(::std::string&& value);
  #endif
  void set_usr(const char* value);
  void set_usr(const char* value, size_t size);
  ::std::string* mutable_usr();
  ::std::string* release_usr();
  void set_allocated_usr(::std::string* usr);

  // string password = 5;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 poolSize = 6;
  void clear_poolsize();
  static const int kPoolSizeFieldNumber = 6;
  ::google::protobuf::uint32 poolsize() const;
  void set_poolsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImOrgCfgMysql)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr usr_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 poolsize_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::InitDefaultsXmsgImOrgCfgMysqlImpl();
};
// -------------------------------------------------------------------

class XmsgImOrgCfgLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImOrgCfgLog) */ {
 public:
  XmsgImOrgCfgLog();
  virtual ~XmsgImOrgCfgLog();

  XmsgImOrgCfgLog(const XmsgImOrgCfgLog& from);

  inline XmsgImOrgCfgLog& operator=(const XmsgImOrgCfgLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImOrgCfgLog(XmsgImOrgCfgLog&& from) noexcept
    : XmsgImOrgCfgLog() {
    *this = ::std::move(from);
  }

  inline XmsgImOrgCfgLog& operator=(XmsgImOrgCfgLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImOrgCfgLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImOrgCfgLog* internal_default_instance() {
    return reinterpret_cast<const XmsgImOrgCfgLog*>(
               &_XmsgImOrgCfgLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(XmsgImOrgCfgLog* other);
  friend void swap(XmsgImOrgCfgLog& a, XmsgImOrgCfgLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImOrgCfgLog* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImOrgCfgLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImOrgCfgLog& from);
  void MergeFrom(const XmsgImOrgCfgLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImOrgCfgLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  const ::std::string& level() const;
  void set_level(const ::std::string& value);
  #if LANG_CXX11
  void set_level(::std::string&& value);
  #endif
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  ::std::string* mutable_level();
  ::std::string* release_level();
  void set_allocated_level(::std::string* level);

  // string output = 2;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::std::string& output() const;
  void set_output(const ::std::string& value);
  #if LANG_CXX11
  void set_output(::std::string&& value);
  #endif
  void set_output(const char* value);
  void set_output(const char* value, size_t size);
  ::std::string* mutable_output();
  ::std::string* release_output();
  void set_allocated_output(::std::string* output);

  // @@protoc_insertion_point(class_scope:XmsgImOrgCfgLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr level_;
  ::google::protobuf::internal::ArenaStringPtr output_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::InitDefaultsXmsgImOrgCfgLogImpl();
};
// -------------------------------------------------------------------

class XmsgImOrgCfgXscTcpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImOrgCfgXscTcpServer) */ {
 public:
  XmsgImOrgCfgXscTcpServer();
  virtual ~XmsgImOrgCfgXscTcpServer();

  XmsgImOrgCfgXscTcpServer(const XmsgImOrgCfgXscTcpServer& from);

  inline XmsgImOrgCfgXscTcpServer& operator=(const XmsgImOrgCfgXscTcpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImOrgCfgXscTcpServer(XmsgImOrgCfgXscTcpServer&& from) noexcept
    : XmsgImOrgCfgXscTcpServer() {
    *this = ::std::move(from);
  }

  inline XmsgImOrgCfgXscTcpServer& operator=(XmsgImOrgCfgXscTcpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImOrgCfgXscTcpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImOrgCfgXscTcpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgImOrgCfgXscTcpServer*>(
               &_XmsgImOrgCfgXscTcpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(XmsgImOrgCfgXscTcpServer* other);
  friend void swap(XmsgImOrgCfgXscTcpServer& a, XmsgImOrgCfgXscTcpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImOrgCfgXscTcpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImOrgCfgXscTcpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImOrgCfgXscTcpServer& from);
  void MergeFrom(const XmsgImOrgCfgXscTcpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImOrgCfgXscTcpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // uint32 worker = 2;
  void clear_worker();
  static const int kWorkerFieldNumber = 2;
  ::google::protobuf::uint32 worker() const;
  void set_worker(::google::protobuf::uint32 value);

  // uint32 peerLimit = 3;
  void clear_peerlimit();
  static const int kPeerLimitFieldNumber = 3;
  ::google::protobuf::uint32 peerlimit() const;
  void set_peerlimit(::google::protobuf::uint32 value);

  // uint32 peerMtu = 4;
  void clear_peermtu();
  static const int kPeerMtuFieldNumber = 4;
  ::google::protobuf::uint32 peermtu() const;
  void set_peermtu(::google::protobuf::uint32 value);

  // uint32 peerRcvBuf = 5;
  void clear_peerrcvbuf();
  static const int kPeerRcvBufFieldNumber = 5;
  ::google::protobuf::uint32 peerrcvbuf() const;
  void set_peerrcvbuf(::google::protobuf::uint32 value);

  // uint32 peerSndBuf = 6;
  void clear_peersndbuf();
  static const int kPeerSndBufFieldNumber = 6;
  ::google::protobuf::uint32 peersndbuf() const;
  void set_peersndbuf(::google::protobuf::uint32 value);

  // uint32 lazyClose = 7;
  void clear_lazyclose();
  static const int kLazyCloseFieldNumber = 7;
  ::google::protobuf::uint32 lazyclose() const;
  void set_lazyclose(::google::protobuf::uint32 value);

  // uint32 heartbeat = 9;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 9;
  ::google::protobuf::uint32 heartbeat() const;
  void set_heartbeat(::google::protobuf::uint32 value);

  // uint32 n2hZombie = 10;
  void clear_n2hzombie();
  static const int kN2HZombieFieldNumber = 10;
  ::google::protobuf::uint32 n2hzombie() const;
  void set_n2hzombie(::google::protobuf::uint32 value);

  // bool tracing = 8;
  void clear_tracing();
  static const int kTracingFieldNumber = 8;
  bool tracing() const;
  void set_tracing(bool value);

  // bool n2hTracing = 12;
  void clear_n2htracing();
  static const int kN2HTracingFieldNumber = 12;
  bool n2htracing() const;
  void set_n2htracing(bool value);

  // uint32 n2hTransTimeout = 11;
  void clear_n2htranstimeout();
  static const int kN2HTransTimeoutFieldNumber = 11;
  ::google::protobuf::uint32 n2htranstimeout() const;
  void set_n2htranstimeout(::google::protobuf::uint32 value);

  // uint32 h2nReConn = 13;
  void clear_h2nreconn();
  static const int kH2NReConnFieldNumber = 13;
  ::google::protobuf::uint32 h2nreconn() const;
  void set_h2nreconn(::google::protobuf::uint32 value);

  // uint32 h2nTransTimeout = 14;
  void clear_h2ntranstimeout();
  static const int kH2NTransTimeoutFieldNumber = 14;
  ::google::protobuf::uint32 h2ntranstimeout() const;
  void set_h2ntranstimeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImOrgCfgXscTcpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::uint32 worker_;
  ::google::protobuf::uint32 peerlimit_;
  ::google::protobuf::uint32 peermtu_;
  ::google::protobuf::uint32 peerrcvbuf_;
  ::google::protobuf::uint32 peersndbuf_;
  ::google::protobuf::uint32 lazyclose_;
  ::google::protobuf::uint32 heartbeat_;
  ::google::protobuf::uint32 n2hzombie_;
  bool tracing_;
  bool n2htracing_;
  ::google::protobuf::uint32 n2htranstimeout_;
  ::google::protobuf::uint32 h2nreconn_;
  ::google::protobuf::uint32 h2ntranstimeout_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::InitDefaultsXmsgImOrgCfgXscTcpServerImpl();
};
// -------------------------------------------------------------------

class XmsgImOrgCfgXmsgNeH2nAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImOrgCfgXmsgNeH2nAddr) */ {
 public:
  XmsgImOrgCfgXmsgNeH2nAddr();
  virtual ~XmsgImOrgCfgXmsgNeH2nAddr();

  XmsgImOrgCfgXmsgNeH2nAddr(const XmsgImOrgCfgXmsgNeH2nAddr& from);

  inline XmsgImOrgCfgXmsgNeH2nAddr& operator=(const XmsgImOrgCfgXmsgNeH2nAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImOrgCfgXmsgNeH2nAddr(XmsgImOrgCfgXmsgNeH2nAddr&& from) noexcept
    : XmsgImOrgCfgXmsgNeH2nAddr() {
    *this = ::std::move(from);
  }

  inline XmsgImOrgCfgXmsgNeH2nAddr& operator=(XmsgImOrgCfgXmsgNeH2nAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImOrgCfgXmsgNeH2nAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImOrgCfgXmsgNeH2nAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgImOrgCfgXmsgNeH2nAddr*>(
               &_XmsgImOrgCfgXmsgNeH2nAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(XmsgImOrgCfgXmsgNeH2nAddr* other);
  friend void swap(XmsgImOrgCfgXmsgNeH2nAddr& a, XmsgImOrgCfgXmsgNeH2nAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImOrgCfgXmsgNeH2nAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImOrgCfgXmsgNeH2nAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImOrgCfgXmsgNeH2nAddr& from);
  void MergeFrom(const XmsgImOrgCfgXmsgNeH2nAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImOrgCfgXmsgNeH2nAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string addr = 2;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string alg = 4;
  void clear_alg();
  static const int kAlgFieldNumber = 4;
  const ::std::string& alg() const;
  void set_alg(const ::std::string& value);
  #if LANG_CXX11
  void set_alg(::std::string&& value);
  #endif
  void set_alg(const char* value);
  void set_alg(const char* value, size_t size);
  ::std::string* mutable_alg();
  ::std::string* release_alg();
  void set_allocated_alg(::std::string* alg);

  // uint32 redundant = 5;
  void clear_redundant();
  static const int kRedundantFieldNumber = 5;
  ::google::protobuf::uint32 redundant() const;
  void set_redundant(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImOrgCfgXmsgNeH2nAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr alg_;
  ::google::protobuf::uint32 redundant_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::InitDefaultsXmsgImOrgCfgXmsgNeH2nAddrImpl();
};
// -------------------------------------------------------------------

class XmsgImOrgCfgXmsgNeN2hAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImOrgCfgXmsgNeN2hAddr) */ {
 public:
  XmsgImOrgCfgXmsgNeN2hAddr();
  virtual ~XmsgImOrgCfgXmsgNeN2hAddr();

  XmsgImOrgCfgXmsgNeN2hAddr(const XmsgImOrgCfgXmsgNeN2hAddr& from);

  inline XmsgImOrgCfgXmsgNeN2hAddr& operator=(const XmsgImOrgCfgXmsgNeN2hAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImOrgCfgXmsgNeN2hAddr(XmsgImOrgCfgXmsgNeN2hAddr&& from) noexcept
    : XmsgImOrgCfgXmsgNeN2hAddr() {
    *this = ::std::move(from);
  }

  inline XmsgImOrgCfgXmsgNeN2hAddr& operator=(XmsgImOrgCfgXmsgNeN2hAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImOrgCfgXmsgNeN2hAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImOrgCfgXmsgNeN2hAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgImOrgCfgXmsgNeN2hAddr*>(
               &_XmsgImOrgCfgXmsgNeN2hAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(XmsgImOrgCfgXmsgNeN2hAddr* other);
  friend void swap(XmsgImOrgCfgXmsgNeN2hAddr& a, XmsgImOrgCfgXmsgNeN2hAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImOrgCfgXmsgNeN2hAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImOrgCfgXmsgNeN2hAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImOrgCfgXmsgNeN2hAddr& from);
  void MergeFrom(const XmsgImOrgCfgXmsgNeN2hAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImOrgCfgXmsgNeN2hAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string cgt = 2;
  void clear_cgt();
  static const int kCgtFieldNumber = 2;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string addr = 4;
  void clear_addr();
  static const int kAddrFieldNumber = 4;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:XmsgImOrgCfgXmsgNeN2hAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::InitDefaultsXmsgImOrgCfgXmsgNeN2hAddrImpl();
};
// -------------------------------------------------------------------

class XmsgImOrgCfgMisc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImOrgCfgMisc) */ {
 public:
  XmsgImOrgCfgMisc();
  virtual ~XmsgImOrgCfgMisc();

  XmsgImOrgCfgMisc(const XmsgImOrgCfgMisc& from);

  inline XmsgImOrgCfgMisc& operator=(const XmsgImOrgCfgMisc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImOrgCfgMisc(XmsgImOrgCfgMisc&& from) noexcept
    : XmsgImOrgCfgMisc() {
    *this = ::std::move(from);
  }

  inline XmsgImOrgCfgMisc& operator=(XmsgImOrgCfgMisc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImOrgCfgMisc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImOrgCfgMisc* internal_default_instance() {
    return reinterpret_cast<const XmsgImOrgCfgMisc*>(
               &_XmsgImOrgCfgMisc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(XmsgImOrgCfgMisc* other);
  friend void swap(XmsgImOrgCfgMisc& a, XmsgImOrgCfgMisc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImOrgCfgMisc* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImOrgCfgMisc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImOrgCfgMisc& from);
  void MergeFrom(const XmsgImOrgCfgMisc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImOrgCfgMisc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hlr = 1;
  void clear_hlr();
  static const int kHlrFieldNumber = 1;
  const ::std::string& hlr() const;
  void set_hlr(const ::std::string& value);
  #if LANG_CXX11
  void set_hlr(::std::string&& value);
  #endif
  void set_hlr(const char* value);
  void set_hlr(const char* value, size_t size);
  ::std::string* mutable_hlr();
  ::std::string* release_hlr();
  void set_allocated_hlr(::std::string* hlr);

  // uint32 orgSyncPageSize = 2;
  void clear_orgsyncpagesize();
  static const int kOrgSyncPageSizeFieldNumber = 2;
  ::google::protobuf::uint32 orgsyncpagesize() const;
  void set_orgsyncpagesize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImOrgCfgMisc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hlr_;
  ::google::protobuf::uint32 orgsyncpagesize_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dorg_2eproto::InitDefaultsXmsgImOrgCfgMiscImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XmsgImOrgCfgPb

// string cgt = 1;
inline void XmsgImOrgCfgPb::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgPb::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgPb.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImOrgCfgPb::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgPb.cgt)
}
#if LANG_CXX11
inline void XmsgImOrgCfgPb::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgPb.cgt)
}
#endif
inline void XmsgImOrgCfgPb::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgPb.cgt)
}
inline void XmsgImOrgCfgPb::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgPb.cgt)
}
inline ::std::string* XmsgImOrgCfgPb::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgPb.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgPb::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgPb.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgPb::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgPb.cgt)
}

// string cfgType = 2;
inline void XmsgImOrgCfgPb::clear_cfgtype() {
  cfgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgPb::cfgtype() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgPb.cfgType)
  return cfgtype_.GetNoArena();
}
inline void XmsgImOrgCfgPb::set_cfgtype(const ::std::string& value) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgPb.cfgType)
}
#if LANG_CXX11
inline void XmsgImOrgCfgPb::set_cfgtype(::std::string&& value) {
  
  cfgtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgPb.cfgType)
}
#endif
inline void XmsgImOrgCfgPb::set_cfgtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgPb.cfgType)
}
inline void XmsgImOrgCfgPb::set_cfgtype(const char* value, size_t size) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgPb.cfgType)
}
inline ::std::string* XmsgImOrgCfgPb::mutable_cfgtype() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgPb.cfgType)
  return cfgtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgPb::release_cfgtype() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgPb.cfgType)
  
  return cfgtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgPb::set_allocated_cfgtype(::std::string* cfgtype) {
  if (cfgtype != NULL) {
    
  } else {
    
  }
  cfgtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfgtype);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgPb.cfgType)
}

// .XmsgImOrgCfgMongodb mongodb = 3;
inline bool XmsgImOrgCfgPb::has_mongodb() const {
  return this != internal_default_instance() && mongodb_ != NULL;
}
inline void XmsgImOrgCfgPb::clear_mongodb() {
  if (GetArenaNoVirtual() == NULL && mongodb_ != NULL) {
    delete mongodb_;
  }
  mongodb_ = NULL;
}
inline const ::XmsgImOrgCfgMongodb& XmsgImOrgCfgPb::mongodb() const {
  const ::XmsgImOrgCfgMongodb* p = mongodb_;
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgPb.mongodb)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImOrgCfgMongodb*>(
      &::_XmsgImOrgCfgMongodb_default_instance_);
}
inline ::XmsgImOrgCfgMongodb* XmsgImOrgCfgPb::release_mongodb() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgPb.mongodb)
  
  ::XmsgImOrgCfgMongodb* temp = mongodb_;
  mongodb_ = NULL;
  return temp;
}
inline ::XmsgImOrgCfgMongodb* XmsgImOrgCfgPb::mutable_mongodb() {
  
  if (mongodb_ == NULL) {
    mongodb_ = new ::XmsgImOrgCfgMongodb;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgPb.mongodb)
  return mongodb_;
}
inline void XmsgImOrgCfgPb::set_allocated_mongodb(::XmsgImOrgCfgMongodb* mongodb) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mongodb_;
  }
  if (mongodb) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mongodb = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mongodb, submessage_arena);
    }
    
  } else {
    
  }
  mongodb_ = mongodb;
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgPb.mongodb)
}

// .XmsgImOrgCfgMysql mysql = 4;
inline bool XmsgImOrgCfgPb::has_mysql() const {
  return this != internal_default_instance() && mysql_ != NULL;
}
inline void XmsgImOrgCfgPb::clear_mysql() {
  if (GetArenaNoVirtual() == NULL && mysql_ != NULL) {
    delete mysql_;
  }
  mysql_ = NULL;
}
inline const ::XmsgImOrgCfgMysql& XmsgImOrgCfgPb::mysql() const {
  const ::XmsgImOrgCfgMysql* p = mysql_;
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgPb.mysql)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImOrgCfgMysql*>(
      &::_XmsgImOrgCfgMysql_default_instance_);
}
inline ::XmsgImOrgCfgMysql* XmsgImOrgCfgPb::release_mysql() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgPb.mysql)
  
  ::XmsgImOrgCfgMysql* temp = mysql_;
  mysql_ = NULL;
  return temp;
}
inline ::XmsgImOrgCfgMysql* XmsgImOrgCfgPb::mutable_mysql() {
  
  if (mysql_ == NULL) {
    mysql_ = new ::XmsgImOrgCfgMysql;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgPb.mysql)
  return mysql_;
}
inline void XmsgImOrgCfgPb::set_allocated_mysql(::XmsgImOrgCfgMysql* mysql) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mysql_;
  }
  if (mysql) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mysql = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mysql, submessage_arena);
    }
    
  } else {
    
  }
  mysql_ = mysql;
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgPb.mysql)
}

// .XmsgImOrgCfgLog log = 5;
inline bool XmsgImOrgCfgPb::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
inline void XmsgImOrgCfgPb::clear_log() {
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
}
inline const ::XmsgImOrgCfgLog& XmsgImOrgCfgPb::log() const {
  const ::XmsgImOrgCfgLog* p = log_;
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgPb.log)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImOrgCfgLog*>(
      &::_XmsgImOrgCfgLog_default_instance_);
}
inline ::XmsgImOrgCfgLog* XmsgImOrgCfgPb::release_log() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgPb.log)
  
  ::XmsgImOrgCfgLog* temp = log_;
  log_ = NULL;
  return temp;
}
inline ::XmsgImOrgCfgLog* XmsgImOrgCfgPb::mutable_log() {
  
  if (log_ == NULL) {
    log_ = new ::XmsgImOrgCfgLog;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgPb.log)
  return log_;
}
inline void XmsgImOrgCfgPb::set_allocated_log(::XmsgImOrgCfgLog* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_;
  }
  if (log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgPb.log)
}

// .XmsgImOrgCfgXscTcpServer xscTcpCfg = 6;
inline bool XmsgImOrgCfgPb::has_xsctcpcfg() const {
  return this != internal_default_instance() && xsctcpcfg_ != NULL;
}
inline void XmsgImOrgCfgPb::clear_xsctcpcfg() {
  if (GetArenaNoVirtual() == NULL && xsctcpcfg_ != NULL) {
    delete xsctcpcfg_;
  }
  xsctcpcfg_ = NULL;
}
inline const ::XmsgImOrgCfgXscTcpServer& XmsgImOrgCfgPb::xsctcpcfg() const {
  const ::XmsgImOrgCfgXscTcpServer* p = xsctcpcfg_;
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgPb.xscTcpCfg)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImOrgCfgXscTcpServer*>(
      &::_XmsgImOrgCfgXscTcpServer_default_instance_);
}
inline ::XmsgImOrgCfgXscTcpServer* XmsgImOrgCfgPb::release_xsctcpcfg() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgPb.xscTcpCfg)
  
  ::XmsgImOrgCfgXscTcpServer* temp = xsctcpcfg_;
  xsctcpcfg_ = NULL;
  return temp;
}
inline ::XmsgImOrgCfgXscTcpServer* XmsgImOrgCfgPb::mutable_xsctcpcfg() {
  
  if (xsctcpcfg_ == NULL) {
    xsctcpcfg_ = new ::XmsgImOrgCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgPb.xscTcpCfg)
  return xsctcpcfg_;
}
inline void XmsgImOrgCfgPb::set_allocated_xsctcpcfg(::XmsgImOrgCfgXscTcpServer* xsctcpcfg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xsctcpcfg_;
  }
  if (xsctcpcfg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xsctcpcfg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xsctcpcfg, submessage_arena);
    }
    
  } else {
    
  }
  xsctcpcfg_ = xsctcpcfg;
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgPb.xscTcpCfg)
}

// repeated .XmsgImOrgCfgXmsgNeH2nAddr h2n = 7;
inline int XmsgImOrgCfgPb::h2n_size() const {
  return h2n_.size();
}
inline void XmsgImOrgCfgPb::clear_h2n() {
  h2n_.Clear();
}
inline const ::XmsgImOrgCfgXmsgNeH2nAddr& XmsgImOrgCfgPb::h2n(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgPb.h2n)
  return h2n_.Get(index);
}
inline ::XmsgImOrgCfgXmsgNeH2nAddr* XmsgImOrgCfgPb::mutable_h2n(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgPb.h2n)
  return h2n_.Mutable(index);
}
inline ::XmsgImOrgCfgXmsgNeH2nAddr* XmsgImOrgCfgPb::add_h2n() {
  // @@protoc_insertion_point(field_add:XmsgImOrgCfgPb.h2n)
  return h2n_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImOrgCfgXmsgNeH2nAddr >*
XmsgImOrgCfgPb::mutable_h2n() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImOrgCfgPb.h2n)
  return &h2n_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImOrgCfgXmsgNeH2nAddr >&
XmsgImOrgCfgPb::h2n() const {
  // @@protoc_insertion_point(field_list:XmsgImOrgCfgPb.h2n)
  return h2n_;
}

// repeated .XmsgImOrgCfgXmsgNeN2hAddr n2h = 8;
inline int XmsgImOrgCfgPb::n2h_size() const {
  return n2h_.size();
}
inline void XmsgImOrgCfgPb::clear_n2h() {
  n2h_.Clear();
}
inline const ::XmsgImOrgCfgXmsgNeN2hAddr& XmsgImOrgCfgPb::n2h(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgPb.n2h)
  return n2h_.Get(index);
}
inline ::XmsgImOrgCfgXmsgNeN2hAddr* XmsgImOrgCfgPb::mutable_n2h(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgPb.n2h)
  return n2h_.Mutable(index);
}
inline ::XmsgImOrgCfgXmsgNeN2hAddr* XmsgImOrgCfgPb::add_n2h() {
  // @@protoc_insertion_point(field_add:XmsgImOrgCfgPb.n2h)
  return n2h_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImOrgCfgXmsgNeN2hAddr >*
XmsgImOrgCfgPb::mutable_n2h() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImOrgCfgPb.n2h)
  return &n2h_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImOrgCfgXmsgNeN2hAddr >&
XmsgImOrgCfgPb::n2h() const {
  // @@protoc_insertion_point(field_list:XmsgImOrgCfgPb.n2h)
  return n2h_;
}

// .XmsgImOrgCfgMisc misc = 9;
inline bool XmsgImOrgCfgPb::has_misc() const {
  return this != internal_default_instance() && misc_ != NULL;
}
inline void XmsgImOrgCfgPb::clear_misc() {
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
}
inline const ::XmsgImOrgCfgMisc& XmsgImOrgCfgPb::misc() const {
  const ::XmsgImOrgCfgMisc* p = misc_;
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgPb.misc)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImOrgCfgMisc*>(
      &::_XmsgImOrgCfgMisc_default_instance_);
}
inline ::XmsgImOrgCfgMisc* XmsgImOrgCfgPb::release_misc() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgPb.misc)
  
  ::XmsgImOrgCfgMisc* temp = misc_;
  misc_ = NULL;
  return temp;
}
inline ::XmsgImOrgCfgMisc* XmsgImOrgCfgPb::mutable_misc() {
  
  if (misc_ == NULL) {
    misc_ = new ::XmsgImOrgCfgMisc;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgPb.misc)
  return misc_;
}
inline void XmsgImOrgCfgPb::set_allocated_misc(::XmsgImOrgCfgMisc* misc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete misc_;
  }
  if (misc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      misc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, misc, submessage_arena);
    }
    
  } else {
    
  }
  misc_ = misc;
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgPb.misc)
}

// uint64 gts = 10;
inline void XmsgImOrgCfgPb::clear_gts() {
  gts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 XmsgImOrgCfgPb::gts() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgPb.gts)
  return gts_;
}
inline void XmsgImOrgCfgPb::set_gts(::google::protobuf::uint64 value) {
  
  gts_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgPb.gts)
}

// uint64 uts = 11;
inline void XmsgImOrgCfgPb::clear_uts() {
  uts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 XmsgImOrgCfgPb::uts() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgPb.uts)
  return uts_;
}
inline void XmsgImOrgCfgPb::set_uts(::google::protobuf::uint64 value) {
  
  uts_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgPb.uts)
}

// -------------------------------------------------------------------

// XmsgImOrgCfgMongodb

// string uri = 1;
inline void XmsgImOrgCfgMongodb::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgMongodb::uri() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgMongodb.uri)
  return uri_.GetNoArena();
}
inline void XmsgImOrgCfgMongodb::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgMongodb.uri)
}
#if LANG_CXX11
inline void XmsgImOrgCfgMongodb::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgMongodb.uri)
}
#endif
inline void XmsgImOrgCfgMongodb::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgMongodb.uri)
}
inline void XmsgImOrgCfgMongodb::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgMongodb.uri)
}
inline ::std::string* XmsgImOrgCfgMongodb::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgMongodb.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgMongodb::release_uri() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgMongodb.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgMongodb::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgMongodb.uri)
}

// -------------------------------------------------------------------

// XmsgImOrgCfgMysql

// string host = 1;
inline void XmsgImOrgCfgMysql::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgMysql::host() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgMysql.host)
  return host_.GetNoArena();
}
inline void XmsgImOrgCfgMysql::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgMysql.host)
}
#if LANG_CXX11
inline void XmsgImOrgCfgMysql::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgMysql.host)
}
#endif
inline void XmsgImOrgCfgMysql::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgMysql.host)
}
inline void XmsgImOrgCfgMysql::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgMysql.host)
}
inline ::std::string* XmsgImOrgCfgMysql::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgMysql.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgMysql::release_host() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgMysql.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgMysql::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgMysql.host)
}

// uint32 port = 2;
inline void XmsgImOrgCfgMysql::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgMysql::port() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgMysql.port)
  return port_;
}
inline void XmsgImOrgCfgMysql::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgMysql.port)
}

// string db = 3;
inline void XmsgImOrgCfgMysql::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgMysql::db() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgMysql.db)
  return db_.GetNoArena();
}
inline void XmsgImOrgCfgMysql::set_db(const ::std::string& value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgMysql.db)
}
#if LANG_CXX11
inline void XmsgImOrgCfgMysql::set_db(::std::string&& value) {
  
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgMysql.db)
}
#endif
inline void XmsgImOrgCfgMysql::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgMysql.db)
}
inline void XmsgImOrgCfgMysql::set_db(const char* value, size_t size) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgMysql.db)
}
inline ::std::string* XmsgImOrgCfgMysql::mutable_db() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgMysql.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgMysql::release_db() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgMysql.db)
  
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgMysql::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    
  } else {
    
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgMysql.db)
}

// string usr = 4;
inline void XmsgImOrgCfgMysql::clear_usr() {
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgMysql::usr() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgMysql.usr)
  return usr_.GetNoArena();
}
inline void XmsgImOrgCfgMysql::set_usr(const ::std::string& value) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgMysql.usr)
}
#if LANG_CXX11
inline void XmsgImOrgCfgMysql::set_usr(::std::string&& value) {
  
  usr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgMysql.usr)
}
#endif
inline void XmsgImOrgCfgMysql::set_usr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgMysql.usr)
}
inline void XmsgImOrgCfgMysql::set_usr(const char* value, size_t size) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgMysql.usr)
}
inline ::std::string* XmsgImOrgCfgMysql::mutable_usr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgMysql.usr)
  return usr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgMysql::release_usr() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgMysql.usr)
  
  return usr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgMysql::set_allocated_usr(::std::string* usr) {
  if (usr != NULL) {
    
  } else {
    
  }
  usr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgMysql.usr)
}

// string password = 5;
inline void XmsgImOrgCfgMysql::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgMysql::password() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgMysql.password)
  return password_.GetNoArena();
}
inline void XmsgImOrgCfgMysql::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgMysql.password)
}
#if LANG_CXX11
inline void XmsgImOrgCfgMysql::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgMysql.password)
}
#endif
inline void XmsgImOrgCfgMysql::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgMysql.password)
}
inline void XmsgImOrgCfgMysql::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgMysql.password)
}
inline ::std::string* XmsgImOrgCfgMysql::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgMysql.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgMysql::release_password() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgMysql.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgMysql::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgMysql.password)
}

// uint32 poolSize = 6;
inline void XmsgImOrgCfgMysql::clear_poolsize() {
  poolsize_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgMysql::poolsize() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgMysql.poolSize)
  return poolsize_;
}
inline void XmsgImOrgCfgMysql::set_poolsize(::google::protobuf::uint32 value) {
  
  poolsize_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgMysql.poolSize)
}

// -------------------------------------------------------------------

// XmsgImOrgCfgLog

// string level = 1;
inline void XmsgImOrgCfgLog::clear_level() {
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgLog::level() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgLog.level)
  return level_.GetNoArena();
}
inline void XmsgImOrgCfgLog::set_level(const ::std::string& value) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgLog.level)
}
#if LANG_CXX11
inline void XmsgImOrgCfgLog::set_level(::std::string&& value) {
  
  level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgLog.level)
}
#endif
inline void XmsgImOrgCfgLog::set_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgLog.level)
}
inline void XmsgImOrgCfgLog::set_level(const char* value, size_t size) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgLog.level)
}
inline ::std::string* XmsgImOrgCfgLog::mutable_level() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgLog.level)
  return level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgLog::release_level() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgLog.level)
  
  return level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgLog::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    
  } else {
    
  }
  level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgLog.level)
}

// string output = 2;
inline void XmsgImOrgCfgLog::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgLog::output() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgLog.output)
  return output_.GetNoArena();
}
inline void XmsgImOrgCfgLog::set_output(const ::std::string& value) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgLog.output)
}
#if LANG_CXX11
inline void XmsgImOrgCfgLog::set_output(::std::string&& value) {
  
  output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgLog.output)
}
#endif
inline void XmsgImOrgCfgLog::set_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgLog.output)
}
inline void XmsgImOrgCfgLog::set_output(const char* value, size_t size) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgLog.output)
}
inline ::std::string* XmsgImOrgCfgLog::mutable_output() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgLog.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgLog::release_output() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgLog.output)
  
  return output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgLog::set_allocated_output(::std::string* output) {
  if (output != NULL) {
    
  } else {
    
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgLog.output)
}

// -------------------------------------------------------------------

// XmsgImOrgCfgXscTcpServer

// string addr = 1;
inline void XmsgImOrgCfgXscTcpServer::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgXscTcpServer::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.addr)
  return addr_.GetNoArena();
}
inline void XmsgImOrgCfgXscTcpServer::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.addr)
}
#if LANG_CXX11
inline void XmsgImOrgCfgXscTcpServer::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgXscTcpServer.addr)
}
#endif
inline void XmsgImOrgCfgXscTcpServer::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgXscTcpServer.addr)
}
inline void XmsgImOrgCfgXscTcpServer::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgXscTcpServer.addr)
}
inline ::std::string* XmsgImOrgCfgXscTcpServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgXscTcpServer.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgXscTcpServer::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgXscTcpServer.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgXscTcpServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgXscTcpServer.addr)
}

// uint32 worker = 2;
inline void XmsgImOrgCfgXscTcpServer::clear_worker() {
  worker_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgXscTcpServer::worker() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.worker)
  return worker_;
}
inline void XmsgImOrgCfgXscTcpServer::set_worker(::google::protobuf::uint32 value) {
  
  worker_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.worker)
}

// uint32 peerLimit = 3;
inline void XmsgImOrgCfgXscTcpServer::clear_peerlimit() {
  peerlimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgXscTcpServer::peerlimit() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.peerLimit)
  return peerlimit_;
}
inline void XmsgImOrgCfgXscTcpServer::set_peerlimit(::google::protobuf::uint32 value) {
  
  peerlimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.peerLimit)
}

// uint32 peerMtu = 4;
inline void XmsgImOrgCfgXscTcpServer::clear_peermtu() {
  peermtu_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgXscTcpServer::peermtu() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.peerMtu)
  return peermtu_;
}
inline void XmsgImOrgCfgXscTcpServer::set_peermtu(::google::protobuf::uint32 value) {
  
  peermtu_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.peerMtu)
}

// uint32 peerRcvBuf = 5;
inline void XmsgImOrgCfgXscTcpServer::clear_peerrcvbuf() {
  peerrcvbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgXscTcpServer::peerrcvbuf() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.peerRcvBuf)
  return peerrcvbuf_;
}
inline void XmsgImOrgCfgXscTcpServer::set_peerrcvbuf(::google::protobuf::uint32 value) {
  
  peerrcvbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.peerRcvBuf)
}

// uint32 peerSndBuf = 6;
inline void XmsgImOrgCfgXscTcpServer::clear_peersndbuf() {
  peersndbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgXscTcpServer::peersndbuf() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.peerSndBuf)
  return peersndbuf_;
}
inline void XmsgImOrgCfgXscTcpServer::set_peersndbuf(::google::protobuf::uint32 value) {
  
  peersndbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.peerSndBuf)
}

// uint32 lazyClose = 7;
inline void XmsgImOrgCfgXscTcpServer::clear_lazyclose() {
  lazyclose_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgXscTcpServer::lazyclose() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.lazyClose)
  return lazyclose_;
}
inline void XmsgImOrgCfgXscTcpServer::set_lazyclose(::google::protobuf::uint32 value) {
  
  lazyclose_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.lazyClose)
}

// bool tracing = 8;
inline void XmsgImOrgCfgXscTcpServer::clear_tracing() {
  tracing_ = false;
}
inline bool XmsgImOrgCfgXscTcpServer::tracing() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.tracing)
  return tracing_;
}
inline void XmsgImOrgCfgXscTcpServer::set_tracing(bool value) {
  
  tracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.tracing)
}

// uint32 heartbeat = 9;
inline void XmsgImOrgCfgXscTcpServer::clear_heartbeat() {
  heartbeat_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgXscTcpServer::heartbeat() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.heartbeat)
  return heartbeat_;
}
inline void XmsgImOrgCfgXscTcpServer::set_heartbeat(::google::protobuf::uint32 value) {
  
  heartbeat_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.heartbeat)
}

// uint32 n2hZombie = 10;
inline void XmsgImOrgCfgXscTcpServer::clear_n2hzombie() {
  n2hzombie_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgXscTcpServer::n2hzombie() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.n2hZombie)
  return n2hzombie_;
}
inline void XmsgImOrgCfgXscTcpServer::set_n2hzombie(::google::protobuf::uint32 value) {
  
  n2hzombie_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.n2hZombie)
}

// uint32 n2hTransTimeout = 11;
inline void XmsgImOrgCfgXscTcpServer::clear_n2htranstimeout() {
  n2htranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgXscTcpServer::n2htranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.n2hTransTimeout)
  return n2htranstimeout_;
}
inline void XmsgImOrgCfgXscTcpServer::set_n2htranstimeout(::google::protobuf::uint32 value) {
  
  n2htranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.n2hTransTimeout)
}

// bool n2hTracing = 12;
inline void XmsgImOrgCfgXscTcpServer::clear_n2htracing() {
  n2htracing_ = false;
}
inline bool XmsgImOrgCfgXscTcpServer::n2htracing() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.n2hTracing)
  return n2htracing_;
}
inline void XmsgImOrgCfgXscTcpServer::set_n2htracing(bool value) {
  
  n2htracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.n2hTracing)
}

// uint32 h2nReConn = 13;
inline void XmsgImOrgCfgXscTcpServer::clear_h2nreconn() {
  h2nreconn_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgXscTcpServer::h2nreconn() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.h2nReConn)
  return h2nreconn_;
}
inline void XmsgImOrgCfgXscTcpServer::set_h2nreconn(::google::protobuf::uint32 value) {
  
  h2nreconn_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.h2nReConn)
}

// uint32 h2nTransTimeout = 14;
inline void XmsgImOrgCfgXscTcpServer::clear_h2ntranstimeout() {
  h2ntranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgXscTcpServer::h2ntranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXscTcpServer.h2nTransTimeout)
  return h2ntranstimeout_;
}
inline void XmsgImOrgCfgXscTcpServer::set_h2ntranstimeout(::google::protobuf::uint32 value) {
  
  h2ntranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXscTcpServer.h2nTransTimeout)
}

// -------------------------------------------------------------------

// XmsgImOrgCfgXmsgNeH2nAddr

// string neg = 1;
inline void XmsgImOrgCfgXmsgNeH2nAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgXmsgNeH2nAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXmsgNeH2nAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXmsgNeH2nAddr.neg)
}
#if LANG_CXX11
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgXmsgNeH2nAddr.neg)
}
#endif
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgXmsgNeH2nAddr.neg)
}
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgXmsgNeH2nAddr.neg)
}
inline ::std::string* XmsgImOrgCfgXmsgNeH2nAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgXmsgNeH2nAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgXmsgNeH2nAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgXmsgNeH2nAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgXmsgNeH2nAddr.neg)
}

// string addr = 2;
inline void XmsgImOrgCfgXmsgNeH2nAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgXmsgNeH2nAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXmsgNeH2nAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXmsgNeH2nAddr.addr)
}
#if LANG_CXX11
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgXmsgNeH2nAddr.addr)
}
#endif
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgXmsgNeH2nAddr.addr)
}
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgXmsgNeH2nAddr.addr)
}
inline ::std::string* XmsgImOrgCfgXmsgNeH2nAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgXmsgNeH2nAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgXmsgNeH2nAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgXmsgNeH2nAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgXmsgNeH2nAddr.addr)
}

// string pwd = 3;
inline void XmsgImOrgCfgXmsgNeH2nAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgXmsgNeH2nAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXmsgNeH2nAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXmsgNeH2nAddr.pwd)
}
#if LANG_CXX11
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgXmsgNeH2nAddr.pwd)
}
#endif
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgXmsgNeH2nAddr.pwd)
}
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgXmsgNeH2nAddr.pwd)
}
inline ::std::string* XmsgImOrgCfgXmsgNeH2nAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgXmsgNeH2nAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgXmsgNeH2nAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgXmsgNeH2nAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgXmsgNeH2nAddr.pwd)
}

// string alg = 4;
inline void XmsgImOrgCfgXmsgNeH2nAddr::clear_alg() {
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgXmsgNeH2nAddr::alg() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXmsgNeH2nAddr.alg)
  return alg_.GetNoArena();
}
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_alg(const ::std::string& value) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXmsgNeH2nAddr.alg)
}
#if LANG_CXX11
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_alg(::std::string&& value) {
  
  alg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgXmsgNeH2nAddr.alg)
}
#endif
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_alg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgXmsgNeH2nAddr.alg)
}
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_alg(const char* value, size_t size) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgXmsgNeH2nAddr.alg)
}
inline ::std::string* XmsgImOrgCfgXmsgNeH2nAddr::mutable_alg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgXmsgNeH2nAddr.alg)
  return alg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgXmsgNeH2nAddr::release_alg() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgXmsgNeH2nAddr.alg)
  
  return alg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_allocated_alg(::std::string* alg) {
  if (alg != NULL) {
    
  } else {
    
  }
  alg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgXmsgNeH2nAddr.alg)
}

// uint32 redundant = 5;
inline void XmsgImOrgCfgXmsgNeH2nAddr::clear_redundant() {
  redundant_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgXmsgNeH2nAddr::redundant() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXmsgNeH2nAddr.redundant)
  return redundant_;
}
inline void XmsgImOrgCfgXmsgNeH2nAddr::set_redundant(::google::protobuf::uint32 value) {
  
  redundant_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXmsgNeH2nAddr.redundant)
}

// -------------------------------------------------------------------

// XmsgImOrgCfgXmsgNeN2hAddr

// string neg = 1;
inline void XmsgImOrgCfgXmsgNeN2hAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgXmsgNeN2hAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXmsgNeN2hAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXmsgNeN2hAddr.neg)
}
#if LANG_CXX11
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgXmsgNeN2hAddr.neg)
}
#endif
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgXmsgNeN2hAddr.neg)
}
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgXmsgNeN2hAddr.neg)
}
inline ::std::string* XmsgImOrgCfgXmsgNeN2hAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgXmsgNeN2hAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgXmsgNeN2hAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgXmsgNeN2hAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgXmsgNeN2hAddr.neg)
}

// string cgt = 2;
inline void XmsgImOrgCfgXmsgNeN2hAddr::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgXmsgNeN2hAddr::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXmsgNeN2hAddr.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXmsgNeN2hAddr.cgt)
}
#if LANG_CXX11
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgXmsgNeN2hAddr.cgt)
}
#endif
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgXmsgNeN2hAddr.cgt)
}
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgXmsgNeN2hAddr.cgt)
}
inline ::std::string* XmsgImOrgCfgXmsgNeN2hAddr::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgXmsgNeN2hAddr.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgXmsgNeN2hAddr::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgXmsgNeN2hAddr.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgXmsgNeN2hAddr.cgt)
}

// string pwd = 3;
inline void XmsgImOrgCfgXmsgNeN2hAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgXmsgNeN2hAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXmsgNeN2hAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXmsgNeN2hAddr.pwd)
}
#if LANG_CXX11
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgXmsgNeN2hAddr.pwd)
}
#endif
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgXmsgNeN2hAddr.pwd)
}
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgXmsgNeN2hAddr.pwd)
}
inline ::std::string* XmsgImOrgCfgXmsgNeN2hAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgXmsgNeN2hAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgXmsgNeN2hAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgXmsgNeN2hAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgXmsgNeN2hAddr.pwd)
}

// string addr = 4;
inline void XmsgImOrgCfgXmsgNeN2hAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgXmsgNeN2hAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgXmsgNeN2hAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgXmsgNeN2hAddr.addr)
}
#if LANG_CXX11
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgXmsgNeN2hAddr.addr)
}
#endif
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgXmsgNeN2hAddr.addr)
}
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgXmsgNeN2hAddr.addr)
}
inline ::std::string* XmsgImOrgCfgXmsgNeN2hAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgXmsgNeN2hAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgXmsgNeN2hAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgXmsgNeN2hAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgXmsgNeN2hAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgXmsgNeN2hAddr.addr)
}

// -------------------------------------------------------------------

// XmsgImOrgCfgMisc

// string hlr = 1;
inline void XmsgImOrgCfgMisc::clear_hlr() {
  hlr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImOrgCfgMisc::hlr() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgMisc.hlr)
  return hlr_.GetNoArena();
}
inline void XmsgImOrgCfgMisc::set_hlr(const ::std::string& value) {
  
  hlr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgMisc.hlr)
}
#if LANG_CXX11
inline void XmsgImOrgCfgMisc::set_hlr(::std::string&& value) {
  
  hlr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImOrgCfgMisc.hlr)
}
#endif
inline void XmsgImOrgCfgMisc::set_hlr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hlr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImOrgCfgMisc.hlr)
}
inline void XmsgImOrgCfgMisc::set_hlr(const char* value, size_t size) {
  
  hlr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImOrgCfgMisc.hlr)
}
inline ::std::string* XmsgImOrgCfgMisc::mutable_hlr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImOrgCfgMisc.hlr)
  return hlr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImOrgCfgMisc::release_hlr() {
  // @@protoc_insertion_point(field_release:XmsgImOrgCfgMisc.hlr)
  
  return hlr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImOrgCfgMisc::set_allocated_hlr(::std::string* hlr) {
  if (hlr != NULL) {
    
  } else {
    
  }
  hlr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hlr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImOrgCfgMisc.hlr)
}

// uint32 orgSyncPageSize = 2;
inline void XmsgImOrgCfgMisc::clear_orgsyncpagesize() {
  orgsyncpagesize_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImOrgCfgMisc::orgsyncpagesize() const {
  // @@protoc_insertion_point(field_get:XmsgImOrgCfgMisc.orgSyncPageSize)
  return orgsyncpagesize_;
}
inline void XmsgImOrgCfgMisc::set_orgsyncpagesize(::google::protobuf::uint32 value) {
  
  orgsyncpagesize_ = value;
  // @@protoc_insertion_point(field_set:XmsgImOrgCfgMisc.orgSyncPageSize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cfg_2dx_2dmsg_2dim_2dorg_2eproto__INCLUDED
